---
- name: Get current Drupal core version
  command: "drush -y --root={{ webroot }} status --fields=drupal-version --field-labels=0"
  register: latest_core_version
  become: yes
  become_user: "{{ run_as_user }}"
  changed_when: no
  when: cms == 'Drupal' and contract_type is search("Drupal Maintenance")

- name: See if WP core needs updating
  command: wp core check-update --field=version --format=csv
  args:
    chdir: "{{ webroot }}"
  register: latest_core_version
  changed_when: false
  failed_when: false
  when: cms == 'WordPress' and contract_type is search("WordPress Maintenance")

- name: Find old CMS database backups
  find:
    age: 1d
    path: "{{ webroot }}/../sql-dumps"
    patterns: "{{ cms_db_name }}.upgradebackup.sql.gz"
    age_stamp: ctime
  register: old_cms_db_backups
  when: contract_type is search("Maintenance")

- name: Delete old CMS database backups
  file:
    path: "{{ item.path }}"
    state: absent
  become: yes
  become_user: "{{ run_as_user }}"
  with_items: "{{ old_cms_db_backups.files }}"
  when: old_cms_db_backups.files is defined and old_cms_db_backups.matched > 0

- name: Check if CMS db backup already exists
  stat:
    path: "{{ webroot }}/../sql-dumps/{{ cms_db_name }}.upgradebackup.sql.gz"
  register: existing_cms_backup
  become: yes
  become_user: "{{ run_as_user }}"
  when: latest_core_version.stdout is defined and latest_core_version.stdout != ""

- name: Back up the databases
  mysql_db:
    state: dump
    name: "{{ cms_db_name }}"
    target: "{{ webroot }}/../sql-dumps/{{ cms_db_name }}.upgradebackup.sql.gz"
    login_user: "{{ db_user }}"
    login_password: "{{ lookup('passwordstore', client + '/' + hostname + '/' + bare_url + '/mysql') }}"
  become: yes
  become_user: "{{ run_as_user }}"
  when: existing_cms_backup.stat is defined and existing_cms_backup.stat.exists == false and latest_core_version.stdout is defined and latest_core_version.stdout != ""

- name: git pull
  git:
    repo: "{{ git_repo_url }}"
    dest: "{{ gitroot }}"
    version: master
    umask: "0007"
    track_submodules: no
  become: yes
  become_user: "{{ run_as_user }}"

# Drupal updates
- block:
  - name: Check for database updates
    command: "drush -y --root={{ webroot }} updatedb-status"
    become: yes
    become_user: "{{ run_as_user }}"
    changed_when: no
    register: updatedb_status
    when: cms == 'Drupal' and contract_type is search("Drupal Maintenance")

  - name: Run database updates
    command: "drush -y --root={{ webroot }} updatedb"
    when: updatedb_status.stdout != 'No database updates required'
    become: yes
    become_user: "{{ run_as_user }}"
    when: cms == 'Drupal' and contract_type is search("Drupal Maintenance")

  when: cms == 'Drupal' and contract_type is search("Drupal Maintenance")

# WP updates
- block:
  - name: Upgrade the WP DB
    command: "wp core update-db"
    args:
      chdir: "{{ webroot }}"
    become: yes
    become_user: "{{ run_as_user }}"
    environment:
      PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/bin"
    when: latest_core_version.stdout is defined and latest_core_version.stdout != ""

  - name: Clear "last updated" times so plugin updates are reflected in monitoring
    command: wp transient delete --network --all
    args:
      chdir: "{{ webroot }}"
    become: yes
    become_user: "{{ run_as_user }}"
    changed_when: false

  when: cms == 'WordPress' and contract_type is search("WordPress Maintenance")

# Civi updates
- block:
  - name: Get the latest CiviCRM version number
    local_action:
      module: uri
      url: http://latest.civicrm.org/stable.php
      return_content: yes
    run_once: true
    changed_when: false
    failed_when: false
    register: civi_ver

  - name: check installed CiviCRM version
    command: "mysql -u{{ db_user }} -p{{ lookup('passwordstore', client + '/' + hostname + '/' + bare_url + '/mysql') }} {{ crm_db_name }} -N -s -e'SELECT version from civicrm_domain WHERE id = 1'"
    register: installed_civi_version
    changed_when: false

  - name: Find old database backups
    find:
      age: 1d
      path: "{{ webroot }}/../sql-dumps"
      patterns: "{{ crm_db_name }}.pre-*.sql.gz"
      age_stamp: ctime
    register: old_db_backups

  - name: Delete old database backups
    file:
      path: "{{ item.path }}"
      state: absent
    become: yes
    become_user: "{{ run_as_user }}"
    with_items: "{{ old_db_backups.files }}"
    when: old_db_backups.files is defined and old_db_backups.matched > 0

  - name: Check if db already exists
    stat:
      path: "{{ webroot }}/../sql-dumps/{{ crm_db_name }}.pre-{{civi_ver.content}}.sql.gz"
    register: existing_backup
    become: yes
    become_user: "{{ run_as_user }}"

  - name: Back up the databases
    mysql_db:
      state: dump
      name: "{{ crm_db_name }}"
      target: "{{ webroot }}/../sql-dumps/{{ crm_db_name }}.pre-{{civi_ver.content}}.sql.gz"
      login_user: "{{ db_user }}"
      login_password: "{{ lookup('passwordstore', client + '/' + hostname + '/' + bare_url + '/mysql') }}"
    become: yes
    become_user: "{{ run_as_user }}"
    when: existing_backup.stat is defined and existing_backup.stat.exists == false

  # This is broken on WP if you just upgraded the db. Checking in with Christian Wach on 8/29/18.
  - name: Upgrade the Civi DB
    command: "cv -n upgrade:db --cwd {{ webroot }}"
    become: yes
    become_user: "{{ run_as_user }}"
    environment:
      PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/bin"
    when: installed_civi_version.stdout != civi_ver.content

  - name: Check for pending extension database updates
    command: "cv ev 'return CRM_Extension_Upgrades::hasPending();' --cwd {{ webroot }}"
    become: yes
    become_user: "{{ run_as_user }}"
    environment:
      PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/bin"
    changed_when: false
    register: pendingUpdates

  - name: Run extension database updates
    command: "cv -n ext:upgrade-db --cwd {{ webroot }}"
    become: yes
    become_user: "{{ run_as_user }}"
    environment:
      PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/bin"
    when: pendingUpdates.stdout == "true"

  when: contract_type is search("Civi Maintenance") and freeze_crm != "1" and civicrm == 'Yes'

