---
# Gather data about CMS/CRM updates needed.
- name: Get current Drupal core version
  command: "drush -y --root={{ webroot }} status --fields=drupal-version --field-labels=0"
  register: latest_civi_core_version
  become_user: "{{ run_as_user }}"
  changed_when: no
  when: cms == 'Drupal' and contract_type is search("Drupal Maintenance") and freeze_cms != "1"

- name: See if WP core needs updating
  command: wp core check-update --field=version --format=csv
  args:
    chdir: "{{ webroot }}"
  register: latest_wp_core_version
  changed_when: false
  failed_when: false
  when: cms == 'WordPress' and contract_type is search("WordPress Maintenance") and freeze_cms != "1"

- name: Get the latest CiviCRM version number
  local_action:
    module: uri
    url: http://latest.civicrm.org/stable.php
    return_content: yes
  run_once: true
  changed_when: false
  failed_when: false
  become: no
  register: civi_ver
  when: contract_type is search("Civi Maintenance") and freeze_crm != "1" and civicrm == 'Yes'

- name: check installed CiviCRM version
  command: "mysql -u{{ db_user }} -p{{ lookup('passwordstore', client + '/' + hostname + '/' + bare_url + '/mysql') }} {{ crm_db_name }} -N -s -e'SELECT version from civicrm_domain WHERE id = 1'"
  register: installed_civi_version
  changed_when: false
  when: contract_type is search("Civi Maintenance") and freeze_crm != "1" and civicrm == 'Yes'

# Delete old backups and make new backups.
- name: Find old CMS database backups
  find:
    age: 1d
    path: "{{ sqldumps_path }}"
    patterns: "{{ cms_db_name }}.upgradebackup.sql.gz"
    age_stamp: ctime
  register: old_cms_db_backups
  when: contract_type is search("Maintenance") and freeze_cms != "1"

- name: Delete old CMS database backups
  file:
    path: "{{ item.path }}"
    state: absent
  become_user: "{{ run_as_user }}"
  with_items: "{{ old_cms_db_backups.files }}"
  when: old_cms_db_backups.files is defined and old_cms_db_backups.matched > 0 and freeze_cms != "1"

- name: Check if CMS db backup already exists
  stat:
    path: "{{ sqldumps_path }}/{{ cms_db_name }}.upgradebackup.sql.gz"
  register: existing_cms_backup
  become_user: "{{ run_as_user }}"
  when: latest_civi_core_version.stdout is defined and latest_civi_core_version.stdout != "" and freeze_cms != "1"

- name: Back up the databases
  mysql_db:
    state: dump
    name: "{{ cms_db_name }}"
    target: "{{ sqldumps_path }}/{{ cms_db_name }}.upgradebackup.sql.gz"
    login_user: "{{ db_user }}"
    login_password: "{{ lookup('passwordstore', client + '/' + hostname + '/' + bare_url + '/mysql') }}"
    dump_extra_args: --single-transaction=TRUE
  become_user: "{{ run_as_user }}"
  when: existing_cms_backup.stat is defined and existing_cms_backup.stat.exists == false and latest_civi_core_version.stdout is defined and latest_civi_core_version.stdout != ""  and freeze_cms != "1"

- block:
  - name: Find old database backups
    find:
      age: 1d
      path: "{{ sqldumps_path }}"
      patterns: "{{ crm_db_name }}.pre-*.sql.gz"
      age_stamp: ctime
    register: old_db_backups

  - name: Delete old database backups
    file:
      path: "{{ item.path }}"
      state: absent
    become_user: "{{ run_as_user }}"
    with_items: "{{ old_db_backups.files }}"
    when: old_db_backups.files is defined and old_db_backups.matched > 0

  - name: Check if db already exists
    stat:
      path: "{{ sqldumps_path }}/{{ crm_db_name }}.pre-update.sql.gz"
    register: existing_backup
    become_user: "{{ run_as_user }}"

  - name: Back up the databases
    mysql_db:
      state: dump
      name: "{{ crm_db_name }}"
      target: "{{ sqldumps_path }}/{{ crm_db_name }}.pre-update.sql.gz"
      login_user: "{{ db_user }}"
      login_password: "{{ lookup('passwordstore', client + '/' + hostname + '/' + bare_url + '/mysql') }}"
      dump_extra_args: --single-transaction=TRUE
    become_user: "{{ run_as_user }}"
    when: existing_backup.stat is defined and existing_backup.stat.exists == false
  when: contract_type is search("Civi Maintenance") and freeze_crm != "1" and civicrm == 'Yes'

# git pull.  Try to do this as late as possible so upgrades aren't pending for long.
- name: git pull
  git:
    repo: "{{ git_repo_url }}"
    dest: "{{ gitroot }}"
    umask: "{{ umask }}"
    track_submodules: no
  become_user: "{{ run_as_user }}"
  when:  freeze_crm != "1" and freeze_cms != "1"
  notify:
    - cv flush
    - clear Drupal cache

- name: Composer install (D8)
  composer:
    command: install
    working_dir: "{{ gitroot }}"
  when: cms == "Drupal8" and freeze_cms != "1"
  become_user: "{{ run_as_user }}"

# Drupal updates
- name: Check for database updates
  command: "drush -y --root={{ webroot }} updbst"
  become_user: "{{ run_as_user }}"
  changed_when: no
  register: updatedb_status
  when: (cms == 'Drupal' or cms == 'Drupal8') and contract_type is search("Drupal Maintenance")

- name: Run database updates
  command: "drush -y --root={{ webroot }} updatedb"
  become_user: "{{ run_as_user }}"
  when: (cms == 'Drupal' or cms == 'Drupal8') and not(updatedb_status.stdout == 'No database updates required' or updatedb_status.stderr == ' [success] No pending updates.') and freeze_cms != "1"

# WP updates
- block:
  - name: Upgrade the WP DB
    command: "wp core update-db --path='{{ webroot }}'"
    become_user: "{{ run_as_user }}"
    environment:
      PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/bin"
    when: latest_wp_core_version.stdout is defined and latest_wp_core_version.stdout != "" and freeze_cms != "1"

  - name: Clear "last updated" times so plugin updates are reflected in monitoring
    command: "wp transient delete --network --all --path='{{ webroot }}'"
    become_user: "{{ run_as_user }}"
    changed_when: false
  when: cms == 'WordPress' and contract_type is search("WordPress Maintenance") and freeze_cms != "1"

# Civi updates
- block:
  - name: Upgrade the Civi DB
    shell: "PATH=$HOME/bin:$PATH;cv -n upgrade:db --cwd {{ webroot }} -vv"
    become_user: "{{ run_as_user }}"
    environment:
      PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/bin"
    when: installed_civi_version.stdout != civi_ver.content
    notify: cv flush

  - name: Check for pending extension database updates
    shell: "PATH=$HOME/bin:$PATH;cv ev 'return CRM_Extension_Upgrades::hasPending();' --cwd {{ webroot }}"
    become_user: "{{ run_as_user }}"
    environment:
      PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/bin"
    changed_when: false
    register: pendingUpdates
    notify: cv flush

  - name: Run extension database updates
    shell: "PATH=$HOME/bin:$PATH;cv -n ext:upgrade-db --cwd {{ webroot }}"
    become_user: "{{ run_as_user }}"
    environment:
      PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/bin"
    when: pendingUpdates.stdout == "true"
    notify: cv flush
  when: contract_type is search("Civi Maintenance") and freeze_crm != "1" and civicrm == 'Yes'
